name: 同步 Gitee Releases

on:
  schedule:
    - cron: '0 0 */2 * *'  # 每2天运行一次
  workflow_dispatch:     # 允许手动触发

jobs:
  mirror-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许创建release和推送代码
      packages: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub>=1.58
      
      - name: 验证环境变量
        run: |
          # 检查SOURCE_REPO是否设置
          if [ -z "$SOURCE_REPO" ]; then
            echo "错误: SOURCE_REPO未设置，请检查Secrets"
            exit 1
          fi
          
          # 检查SOURCE_GITEE_TOKEN是否设置
          if [ -z "$SOURCE_GITEE_TOKEN" ]; then
            echo "警告: SOURCE_GITEE_TOKEN未设置，可能会遇到Gitee API限制"
          fi
          
          # 为TARGET_REPO设置默认值（当前仓库）
          if [ -z "$TARGET_REPO" ]; then
            echo "警告: TARGET_REPO未设置，将使用当前仓库作为目标"
            export TARGET_REPO="${GITHUB_REPOSITORY}"  # GITHUB_REPOSITORY是Actions内置变量，值为当前仓库"用户名/仓库名"
            echo "TARGET_REPO已自动设置为: $TARGET_REPO"
          fi
          
          # 打印最终使用的仓库信息（方便调试）
          echo "源仓库 (Gitee): $SOURCE_REPO"
          echo "目标仓库 (GitHub): $TARGET_REPO"
        env:
          SOURCE_REPO: ${{ secrets.SOURCE_REPO }}
          TARGET_REPO: ${{ secrets.TARGET_REPO }}
          SOURCE_GITEE_TOKEN: ${{ secrets.SOURCE_GITEE_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}  # 内置变量，当前仓库"用户名/仓库名"
      
      - name: 检查更新并同步
        env:
          SOURCE_REPO: ${{ secrets.SOURCE_REPO }}
          TARGET_REPO: ${{ secrets.TARGET_REPO || github.repository }}  # 若TARGET_REPO未设置，使用当前仓库
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_GITEE_TOKEN: ${{ secrets.SOURCE_GITEE_TOKEN }}  # 修改为Gitee的token
        run: |
          python mirror_gitee_releases.py  # 确保文件名与你的Python脚本一致
